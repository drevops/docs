"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[4086],{170:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var s=t(4848),o=t(8453);const i={sidebar_label:"PHPStan"},r="PHPStan - PHP Static Analysis Tool",l={id:"tools/phpstan",title:"PHPStan - PHP Static Analysis Tool",description:"https://phpstan.org/user-guide/getting-started",source:"@site/content/tools/phpstan.mdx",sourceDirName:"tools",slug:"/tools/phpstan",permalink:"/tools/phpstan",draft:!1,unlisted:!1,editUrl:"https://github.com/drevops/scaffold/tree/develop/.scaffold/docs/content/tools/phpstan.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"PHPStan"},sidebar:"docs",previous:{title:"PHPMD",permalink:"/tools/phpmd"},next:{title:"PHPUnit",permalink:"/tools/phpunit"}},a={},c=[{value:"Usage",id:"usage",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Ignoring",id:"ignoring",level:2},{value:"Ignoring fail in CI",id:"ignoring-fail-in-ci",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"phpstan---php-static-analysis-tool",children:"PHPStan - PHP Static Analysis Tool"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://phpstan.org/user-guide/getting-started",children:"https://phpstan.org/user-guide/getting-started"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"PHPStan focuses on finding errors in your code without actually running it. It\ncatches whole classes of bugs even before you write tests for the code. It\nmoves\nPHP closer to compiled languages in the sense that the correctness of each\nline\nof the code can be checked before you run the actual line."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Scaffold comes with ",(0,s.jsx)(n.a,{href:"https://github.com/drevops/scaffold/blob/develop/phpstan.neon",children:"pre-configured PHPStan ruleset"}),"\nfor\nDrupal projects."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"vendor/bin/phpstan\n"})}),"\n",(0,s.jsx)(n.p,{children:"or"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"ahoy lint-be\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["PHPStan does not fix code. It only reports errors. To fix errors, use\nRector. See ",(0,s.jsx)(n.a,{href:"/tools/rector",children:"Rector"})," for more information."]})}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"https://phpstan.org/config-reference",children:"configuration reference"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["All global configuration takes place in\nthe ",(0,s.jsx)(n.a,{href:"https://github.com/drevops/scaffold/blob/develop/phpstan.neon",children:(0,s.jsx)(n.code,{children:"phpstan.neon"})}),"\nfile."]}),"\n",(0,s.jsxs)(n.p,{children:["By default, PHPStan will check with the Drupal context in mind thanks to\n",(0,s.jsx)(n.a,{href:"https://github.com/mglaman/phpstan-drupal",children:"mglaman/phpstan-drupal"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Targets include custom modules and themes, settings and tests."}),"\n",(0,s.jsx)(n.p,{children:"Adding or removing targets:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"parameters:\n  paths:\n    - path/to/dir_or_file\n  excludePaths:\n    - path/to/exclude/all_dir_files/*\n    - path/to/exclude/a_file.php\n"})}),"\n",(0,s.jsx)(n.h2,{id:"ignoring",children:"Ignoring"}),"\n",(0,s.jsxs)(n.p,{children:["Ignoring rules ",(0,s.jsx)(n.strong,{children:"globally"})," takes place in\nthe ",(0,s.jsx)(n.a,{href:"https://github.com/drevops/scaffold/blob/develop/phpstan.neon",children:(0,s.jsx)(n.code,{children:"phpstan.neon"})})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"parameters:\n  ignoreErrors:\n    - # Comment about why this rules is excluded.\n      # 'message' is a regular expression with `#` as begin and end delimiters.\n      message: '#.*no value type specified in iterable type array.#'\n      paths:\n        - path/to/exclude/all_dir_files/*\n        - path/to/exclude/a_file.php\n"})}),"\n",(0,s.jsxs)(n.p,{children:["PHPStan does not support ignoring of ",(0,s.jsx)(n.strong,{children:"all PHPStan rules"})," within a file."]}),"\n",(0,s.jsxs)(n.p,{children:["PHPStan does not support ignoring of ",(0,s.jsx)(n.strong,{children:"a specific rule"})," within a file."]}),"\n",(0,s.jsxs)(n.p,{children:["PHPStan ",(0,s.jsx)(n.a,{href:"https://github.com/phpstan/phpstan/issues/4452",children:"does not support"}),"\nignoring of the ",(0,s.jsx)(n.strong,{children:"code blocks"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["To ignore only the current and the ",(0,s.jsx)(n.strong,{children:"next line"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// @phpstan-ignore-next-line\n$a = 1;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"ignoring-fail-in-ci",children:"Ignoring fail in CI"}),"\n",(0,s.jsx)(n.p,{children:"This tool runs in CI by default and fails the build if there are any violations."}),"\n",(0,s.jsxs)(n.p,{children:["Set ",(0,s.jsx)(n.code,{children:"DREVOPS_CI_PHPSTAN_IGNORE_FAILURE"})," environment variable to ",(0,s.jsx)(n.code,{children:"1"})," to ignore\nfailures. The tool will still run and report violations, if any."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(6540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);