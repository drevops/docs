"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[176],{8112:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>h});var s=t(4848),r=t(8453);const i={},o="Behat",a={id:"tools/behat",title:"Behat",description:"https://github.com/Behat/Behat",source:"@site/content/tools/behat.mdx",sourceDirName:"tools",slug:"/tools/behat",permalink:"/tools/behat",draft:!1,unlisted:!1,editUrl:"https://github.com/drevops/scaffold/tree/develop/.scaffold/docs/content/tools/behat.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Ahoy",permalink:"/tools/ahoy"},next:{title:"Docker",permalink:"/tools/docker"}},l={},h=[{value:"Usage",id:"usage",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Contexts and extensions",id:"contexts-and-extensions",level:3},{value:"Reports and screenshots",id:"reports-and-screenshots",level:2},{value:"Profiles",id:"profiles",level:3},{value:"Ignoring fail in CI",id:"ignoring-fail-in-ci",level:2},{value:"Writing tests",id:"writing-tests",level:2},{value:"<code>FeatureContext.php</code> and example tests",id:"featurecontextphp-and-example-tests",level:3}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"behat",children:"Behat"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/Behat/Behat",children:"https://github.com/Behat/Behat"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://docs.behat.org/en/latest/user_guide.html",children:"https://docs.behat.org/en/latest/user_guide.html"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"A php framework for auto-testing your business expectations."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Scaffold comes with ",(0,s.jsx)(n.a,{href:"https://github.com/drevops/scaffold/blob/develop/behat.yml",children:"pre-configured Behat profiles"})," for Drupal projects."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.p,{children:"Since Behat requires a running Drupal instance, it can only be run within\ncontainer environment."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"docker compose exec -T cli php -d memory_limit=-1 vendor/bin/behat\n"})}),"\n",(0,s.jsx)(n.p,{children:"or"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"ahoy test-bdd\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Running all tests in the file"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"docker compose exec -T cli vendor/bin/behat tests/behat/features/my.feature\n"})}),"\n",(0,s.jsx)(n.p,{children:"or"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"ahoy test-bdd tests/behat/features/my.feature\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Running tagged tests with ",(0,s.jsx)(n.code,{children:"@group_name"})," tag"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"docker compose exec -T cli vendor/bin/behat --tags=group_name\n"})}),"\n",(0,s.jsx)(n.p,{children:"or"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"ahoy test-bdd --tags=group_name\n"})}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"https://docs.behat.org/en/latest/user_guide/configuration.html",children:"configuration reference"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["All global configuration takes place in the ",(0,s.jsx)(n.a,{href:"https://github.com/drevops/scaffold/blob/develop/behat.yml",children:(0,s.jsx)(n.code,{children:"behat.yml"})})," file."]}),"\n",(0,s.jsxs)(n.p,{children:["By default, Behat will run all tests defined in ",(0,s.jsx)(n.code,{children:"tests/behat/features"})," directory."]}),"\n",(0,s.jsx)(n.p,{children:"Adding or removing test targets:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:"default:\n  suites:\n    default:\n      paths:\n        - '%paths.base%/web/modules/custom/mymodule/tests/behat/features'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"contexts-and-extensions",children:"Contexts and extensions"}),"\n",(0,s.jsx)(n.p,{children:"The configuration uses the following contexts and extensions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/jhedstrom/drupalextension",children:"Drupal Extension"}),": The Drupal Extension is an integration layer between Behat, Mink Extension, and Drupal. It provides step definitions for common testing scenarios specific to Drupal sites."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/drevops/behat-screenshot",children:"Behat Screenshot Extension"}),": Behat extension and step definitions to create HTML and image screenshots on demand or when tests fail."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/drevops/behat-format-progress-fail",children:"Behat Progress Fail Output Extension"}),": Behat output formatter to show progress as TAP and fails inline."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/drevops/behat-steps",children:"Behat Steps"}),": Collection of Behat steps for Drupal"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"reports-and-screenshots",children:"Reports and screenshots"}),"\n",(0,s.jsxs)(n.p,{children:["Behat is configured to generate test run reports in JUnit format stored in\n",(0,s.jsx)(n.code,{children:".logs/test_results/behat"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Screenshots for failed tests or purposely made screenshots are stored in\n",(0,s.jsx)(n.code,{children:".logs/screenshots"})," directory."]}),"\n",(0,s.jsx)(n.p,{children:"Both test results and screenshots are stored as artifacts in CI."}),"\n",(0,s.jsx)(n.h3,{id:"profiles",children:"Profiles"}),"\n",(0,s.jsxs)(n.p,{children:["Behat runs with ",(0,s.jsx)(n.code,{children:"default"})," profile defined in the configuration file: this runs\nall tests not tagged with ",(0,s.jsx)(n.code,{children:"@skipped"})," tag."]}),"\n",(0,s.jsxs)(n.p,{children:["There are also ",(0,s.jsx)(n.code,{children:"p1"})," and ",(0,s.jsx)(n.code,{children:"p2"})," profiles defined that run tests not tagged with\n",(0,s.jsx)(n.code,{children:"@skipped"})," and tagged with ",(0,s.jsx)(n.code,{children:"@p1"})," and ",(0,s.jsx)(n.code,{children:"@p2"})," tags respectively. These profiles are\nused in CI to run tests in parallel if parallel runners number is greater than 1.\nBehat will run tests using ",(0,s.jsx)(n.code,{children:"@pX"})," tags on tests, where ",(0,s.jsx)(n.code,{children:"X"})," is the runner index\nstarting from ",(0,s.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["In the example below, if there is one runner, Behat will run all scenarios, but\nif there are 2 runners - Behat will run only scenarios with ",(0,s.jsx)(n.code,{children:"@p0"})," tag on the\nfirst runner and scenarios with ",(0,s.jsx)(n.code,{children:"@p1"})," tag on the second runner."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gherkin",children:'@homepage @smoke\nFeature: Homepage\n\n  Ensure that homepage is displayed as expected.\n\n  @api @p0\n  Scenario: Anonymous user visits homepage\n    Given I go to the homepage\n    And I should be in the "<front>" path\n    Then I save screenshot\n\n  @api @javascript @p1\n  Scenario: Anonymous user visits homepage\n    Given I go to the homepage\n    And I should be in the "<front>" path\n    Then I save screenshot\n'})}),"\n",(0,s.jsx)(n.h2,{id:"ignoring-fail-in-ci",children:"Ignoring fail in CI"}),"\n",(0,s.jsx)(n.p,{children:"This tool runs in CI by default and fails the build if there are any violations."}),"\n",(0,s.jsxs)(n.p,{children:["Set ",(0,s.jsx)(n.code,{children:"DREVOPS_CI_BEHAT_IGNORE_FAILURE"})," environment variable to ",(0,s.jsx)(n.code,{children:"1"})," to ignore\nfailures. The tool will still run and report violations, if any."]}),"\n",(0,s.jsx)(n.h2,{id:"writing-tests",children:"Writing tests"}),"\n",(0,s.jsx)(n.p,{children:"When writing tests, it is recommended to use the following structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gherkin",children:'@tag_describing_feature_group\nFeature: Short feature description\n\n  As a site owner\n  I want to make sure that my feature does what it is supposed to do\n  So that I can be sure that my site is working as expected\n\n  @api\n  Scenario: Anonymous user uses a feature\n    Given I go to the homepage\n    And I should be in the "<front>" path\n    Then I save screenshot\n\n  @api @javascript\n  Scenario: Anonymous user uses a feature with AJAX\n    Given I go to the homepage\n    And I click ".button" element\n    Then I save screenshot\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"@api"})," tag for tests that do not require JavaScript and ",(0,s.jsx)(n.code,{children:"@api @javascript"}),"\nfor tests that require JavaScript."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"JavaScript tests are slow. Try using as few JavaScript tests as possible to\nkeep the test run time low."})}),"\n",(0,s.jsxs)(n.h3,{id:"featurecontextphp-and-example-tests",children:[(0,s.jsx)(n.code,{children:"FeatureContext.php"})," and example tests"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://github.com/drevops/scaffold/blob/develop/tests/behat/bootstrap/FeatureContext.php",children:(0,s.jsx)(n.code,{children:"FeatureContext.php"})}),"\nfile is a Behat custom context file that is loaded by default. This is where\ncustom step definitions and hooks should be placed."]}),"\n",(0,s.jsxs)(n.p,{children:["It is recommended to use traits to organize step definitions and hooks and\ninclude those traits in the ",(0,s.jsx)(n.code,{children:"FeatureContext.php"})," file. There are already\nseveral traits included from the ",(0,s.jsx)(n.a,{href:"https://github.com/drevops/behat-steps",children:"Behat Steps"}),"\npackage (only basic ones are included; there are more available in the package)."]}),"\n",(0,s.jsxs)(n.p,{children:["There are also example tests in the ",(0,s.jsx)(n.a,{href:"https://github.com/drevops/scaffold/blob/develop/tests/behat/features",children:(0,s.jsx)(n.code,{children:"tests/behat/features"})}),"\ndirectory that can be used as a starting point for writing tests. These tests\ndefine ",(0,s.jsx)(n.code,{children:"@smoke"})," tests for the homepage and login page as well as tests for\ncontributed modules."]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);