"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[5134],{8873:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var n=s(4848),r=s(8453);const o={},i="Test",l={id:"workflows/test",title:"Test",description:"Scaffold supports running Unit (PHPUnit) and BDD (Behat) tests.",source:"@site/content/workflows/test.mdx",sourceDirName:"workflows",slug:"/workflows/test",permalink:"/workflows/test",draft:!1,unlisted:!1,editUrl:"https://github.com/drevops/scaffold/tree/develop/.scaffold/docs/content/workflows/test.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"QA",permalink:"/workflows/qa"},next:{title:"Variables",permalink:"/workflows/variables"}},a={},d=[{value:"Unit testing",id:"unit-testing",level:2},{value:"Reporting",id:"reporting",level:3},{value:"Scaffold",id:"scaffold",level:3},{value:"Drupal settings tests",id:"drupal-settings-tests",level:4},{value:"CI configuration tests",id:"ci-configuration-tests",level:4},{value:"BDD testing",id:"bdd-testing",level:2},{value:"FeatureContext",id:"featurecontext",level:3},{value:"Profiles",id:"profiles",level:3},{value:"Parallel runs",id:"parallel-runs",level:3},{value:"Skipping tests",id:"skipping-tests",level:3},{value:"Screenshots",id:"screenshots",level:3},{value:"Format",id:"format",level:3},{value:"Reporting",id:"reporting-1",level:3},{value:"Scaffold",id:"scaffold-1",level:3}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"test",children:"Test"}),"\n",(0,n.jsx)(t.p,{children:"Scaffold supports running Unit (PHPUnit) and BDD (Behat) tests."}),"\n",(0,n.jsx)(t.p,{children:"For local development, the tests can be run using handy Ahoy commands:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"ahoy test # Run all tests\n\nahoy test-unit # Run Unit tests\n\nahoy test-kernel # Run Kernel tests\n\nahoy test-functional # Run Functional tests\n\nahoy test-bdd # Run BDD tests\n"})}),"\n",(0,n.jsx)(t.p,{children:"In CI, tests are run by calling the test binaries directly."}),"\n",(0,n.jsx)(t.h2,{id:"unit-testing",children:"Unit testing"}),"\n",(0,n.jsx)(t.p,{children:"DrevOps Scaffold uses PHPUnit as a framework for Unit testing."}),"\n",(0,n.jsxs)(t.p,{children:["It is configured to use a copy of Drupal core's ",(0,n.jsx)(t.code,{children:"core/phpunit.xml.dist"}),"\nconfiguration file. This is done to allow per-project customisations."]}),"\n",(0,n.jsx)(t.h3,{id:"reporting",children:"Reporting"}),"\n",(0,n.jsxs)(t.p,{children:["Test reports are stored in ",(0,n.jsx)(t.code,{children:"$DREVOPS_TEST_RESULTS_DIR/phpunit"})," directory\nseparated into multiple files and named after the suite name.\nThese reports are usually used in CI to track tests performance and stability."]}),"\n",(0,n.jsx)(t.h3,{id:"scaffold",children:"Scaffold"}),"\n",(0,n.jsxs)(t.p,{children:["DrevOps Scaffold provides a Unit test scaffold for custom ",(0,n.jsx)(t.a,{href:"https://github.com/drevops/scaffold/blob/develop/web/modules/custom/ys_core/tests/src",children:"modules"}),",\n",(0,n.jsx)(t.a,{href:"https://github.com/drevops/scaffold/blob/develop/web/themes/custom/your_site_theme/tests/src",children:"themes"})," and\n",(0,n.jsx)(t.a,{href:"https://github.com/drevops/scaffold/blob/develop/tests/phpunit",children:"scripts"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"These tests already run in CI when you install DrevOps Scaffold and can be used as a\nstarting point for writing your own."}),"\n",(0,n.jsx)(t.h4,{id:"drupal-settings-tests",children:"Drupal settings tests"}),"\n",(0,n.jsxs)(t.p,{children:["DrevOps Scaffold provides a ",(0,n.jsx)(t.a,{href:"https://github.com/drevops/scaffold/blob/develop/tests/phpunit/DrupalSettingsTest.php",children:"Drupal settings tests"}),"\nto test that Drupal settings are correct based on the environment type the site\nis running: with the number of custom modules multiplied by the number of\nenvironment types, it is easy to miss certain settings which may lead to\nunexpected issues with deployments."]}),"\n",(0,n.jsxs)(t.p,{children:["It is intended to be used in a consumer site and kept up-to-date with the\nchanges to the ",(0,n.jsx)(t.code,{children:"settings.php"})," file."]}),"\n",(0,n.jsx)(t.h4,{id:"ci-configuration-tests",children:"CI configuration tests"}),"\n",(0,n.jsxs)(t.p,{children:["DrevOps Scaffold provides a ",(0,n.jsx)(t.a,{href:"https://github.com/drevops/scaffold/blob/develop/tests/phpunit/CircleCiConfigTest.php",children:"CI configuration tests"}),"\nto assert that CI configuration is correct. It is intended to be used in a consumer\nsite and kept up-to-date with the CI configurations."]}),"\n",(0,n.jsx)(t.p,{children:"For example, there are tests for the regular expressions that control for which\nbranches the deployment job runs. Such test makes sure that there are no\nunexpected surprises during the consumer site release to production."}),"\n",(0,n.jsx)(t.h2,{id:"bdd-testing",children:"BDD testing"}),"\n",(0,n.jsx)(t.p,{children:"DrevOps Scaffold uses Behat for Behavior-Driven Development (BDD) testing."}),"\n",(0,n.jsxs)(t.p,{children:["It provides full Behat support, including configuration in ",(0,n.jsx)(t.a,{href:"https://github.com/drevops/scaffold/blob/develop/behat.yml",children:"behat.yml"}),"\nand a ",(0,n.jsx)(t.a,{href:"https://github.com/drevops/scaffold/blob/develop/docker-compose.yml",children:"browser container"})," to run interactive tests."]}),"\n",(0,n.jsx)(t.p,{children:"It also provides additional features:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://github.com/drupalprojects/drupalextension",children:"Behat Drupal Extension"})," - an extension to work with Drupal."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://github.com/drevops/behat-steps",children:"Behat steps"})," - a library of re-usable Behat steps."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://github.com/drevops/behat-screenshot",children:"Behat Screenshot"})," - extension to capture screenshots on-demand and on failure."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://github.com/drevops/behat-format-progress-fail",children:"Behat Progress formatter"})," - extension to show progress as TAP and fails inline."]}),"\n",(0,n.jsx)(t.li,{children:"Parallel profiles - configuration to allow running tests in parallel."}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"featurecontext",children:"FeatureContext"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.a,{href:"https://github.com/drevops/scaffold/blob/develop/tests/behat/bootstrap/FeatureContext.php",children:"FeatureContext.php"})," file comes with\nincluded steps from ",(0,n.jsx)(t.a,{href:"https://github.com/drevops/behat-steps",children:"Behat steps"})," package."]}),"\n",(0,n.jsx)(t.p,{children:"Custom steps can be added into this file."}),"\n",(0,n.jsx)(t.h3,{id:"profiles",children:"Profiles"}),"\n",(0,n.jsxs)(t.p,{children:["Behat ",(0,n.jsx)(t.code,{children:"default"})," profile configured with sensible defaults to allow running Behat\nwith provided extensions."]}),"\n",(0,n.jsxs)(t.p,{children:["The profile can be overridden using ",(0,n.jsx)(t.code,{children:"$DREVOPS_CI_BEHAT_PROFILE"})," environment\nvariable."]}),"\n",(0,n.jsx)(t.h3,{id:"parallel-runs",children:"Parallel runs"}),"\n",(0,n.jsx)(t.p,{children:"In CI, Behat tests can be tagged to be split between multiple runners. The tags\nare then used by profiles with the identical names to run them."}),"\n",(0,n.jsxs)(t.p,{children:["Out of the box, DrevOps Scaffold provides support for unlimited parallel\nrunners, but only 2 parallel profiles ",(0,n.jsx)(t.code,{children:"p0"})," and ",(0,n.jsx)(t.code,{children:"p1"}),": a feature can be tagged by\neither ",(0,n.jsx)(t.code,{children:"@p0"})," or ",(0,n.jsx)(t.code,{children:"@p1"}),"to run in a dedicated runner, or with both tags to run in\nboth runners."]}),"\n",(0,n.jsxs)(t.p,{children:["Note that you can easily add more ",(0,n.jsx)(t.code,{children:"p*"})," profiles in your ",(0,n.jsx)(t.code,{children:"behat.yml"})," by copying\nexisting ",(0,n.jsx)(t.code,{children:"p1"}),"profile and changing several lines."]}),"\n",(0,n.jsxs)(t.p,{children:["Features without ",(0,n.jsx)(t.code,{children:"@p*"})," tags will always run in the first CI runner, so even\nif you forget to tag the feature, it will still be allocated to a runner."]}),"\n",(0,n.jsxs)(t.p,{children:["If CI has only one runner - a ",(0,n.jsx)(t.code,{children:"default"})," profile will be used and all tests\n(except for those that tagged with ",(0,n.jsx)(t.code,{children:"@skipped"}),") will be run."]}),"\n",(0,n.jsx)(t.h3,{id:"skipping-tests",children:"Skipping tests"}),"\n",(0,n.jsxs)(t.p,{children:["Add ",(0,n.jsx)(t.code,{children:"@skipped"})," tag to a feature or scenario to exclude it from the test run."]}),"\n",(0,n.jsx)(t.h3,{id:"screenshots",children:"Screenshots"}),"\n",(0,n.jsxs)(t.p,{children:["Test screenshots are stored into ",(0,n.jsx)(t.code,{children:".logs/screenshots"})," location by default,\nwhich can be overwritten using ",(0,n.jsx)(t.code,{children:"$BEHAT_SCREENSHOT_DIR"})," variable (courtesy of\n",(0,n.jsx)(t.a,{href:"https://github.com/drevops/behat-screenshot",children:"Behat Screenshot"})," package). In CI, screenshots are stored as artifacts\nand are accessible in the Artifacts tab."]}),"\n",(0,n.jsx)(t.h3,{id:"format",children:"Format"}),"\n",(0,n.jsxs)(t.p,{children:["Out of the box, DrevOps Scaffold comes with ",(0,n.jsx)(t.a,{href:"https://github.com/drevops/behat-format-progress-fail",children:"Behat Progress formatter"}),"\nBehat output formatter to show progress as TAP and fails inline. This allows to\ncontinue test runs after failures while maintaining a minimal output."]}),"\n",(0,n.jsx)(t.h3,{id:"reporting-1",children:"Reporting"}),"\n",(0,n.jsxs)(t.p,{children:["Test reports produced if ",(0,n.jsx)(t.code,{children:"$DREVOPS_TEST_RESULTS_DIR"})," is set. They are stored in\n",(0,n.jsx)(t.code,{children:"$DREVOPS_TEST_RESULTS_DIR/behat"})," directory. These reports are usually used in\nCI to track tests performance and stability."]}),"\n",(0,n.jsx)(t.h3,{id:"scaffold-1",children:"Scaffold"}),"\n",(0,n.jsxs)(t.p,{children:["DrevOps Scaffold provides a BDD test scaffold for custom ",(0,n.jsx)(t.a,{href:"https://github.com/drevops/scaffold/blob/develop/web/modules/custom/ys_core/tests/src",children:"modules"}),"\nand ",(0,n.jsx)(t.a,{href:"https://github.com/drevops/scaffold/blob/develop/web/themes/custom/your_site_theme/tests/src",children:"themes"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"These tests already run in CI when you install DrevOps Scaffold and can be used\nas a starting point for writing your own."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>l});var n=s(6540);const r={},o=n.createContext(r);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);