"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[3944],{4424:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>a});var l=i(4848),s=i(8453);const o={sidebar_label:"PHPCS"},r="PHPCS - PHP Code Sniffer",c={id:"tools/phpcs",title:"PHPCS - PHP Code Sniffer",description:"https://github.com/squizlabs/PHP_CodeSniffer",source:"@site/content/tools/phpcs.mdx",sourceDirName:"tools",slug:"/tools/phpcs",permalink:"/tools/phpcs",draft:!1,unlisted:!1,editUrl:"https://github.com/drevops/scaffold/tree/develop/.scaffold/docs/content/tools/phpcs.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"PHPCS"},sidebar:"docs",previous:{title:"Hadolint",permalink:"/tools/hadolint"},next:{title:"PHPMD",permalink:"/tools/phpmd"}},t={},a=[{value:"Usage",id:"usage",level:2},{value:"Check for violations",id:"check-for-violations",level:3},{value:"Fix violations",id:"fix-violations",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Ignoring",id:"ignoring",level:2},{value:"Ignoring fail in CI",id:"ignoring-fail-in-ci",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"phpcs---php-code-sniffer",children:"PHPCS - PHP Code Sniffer"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/squizlabs/PHP_CodeSniffer",children:"https://github.com/squizlabs/PHP_CodeSniffer"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["PHP_CodeSniffer is a set of two PHP scripts; the main ",(0,l.jsx)(n.code,{children:"phpcs"})," script that\ntokenizes PHP, JavaScript and CSS files to detect violations of a defined coding\nstandard, and a second ",(0,l.jsx)(n.code,{children:"phpcbf"})," script to automatically correct coding standard\nviolations. PHP_CodeSniffer is an essential development tool that ensures your\ncode remains clean and consistent."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Scaffold comes with ",(0,l.jsx)(n.a,{href:"https://github.com/drevops/scaffold/blob/develop/phpcs.xml",children:"pre-configured PHPCS ruleset"})," for Drupal projects."]}),"\n",(0,l.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,l.jsx)(n.h3,{id:"check-for-violations",children:"Check for violations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"vendor/bin/phpcs\n"})}),"\n",(0,l.jsx)(n.p,{children:"or"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"ahoy lint-be\n"})}),"\n",(0,l.jsx)(n.h3,{id:"fix-violations",children:"Fix violations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"vendor/bin/phpcbf\n"})}),"\n",(0,l.jsx)(n.p,{children:"or"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"ahoy lint-fix\n"})}),"\n",(0,l.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,l.jsxs)(n.p,{children:["See ",(0,l.jsx)(n.a,{href:"https://github.com/squizlabs/PHP_CodeSniffer/wiki/Configuration-Options",children:"configuration reference"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["All global configuration takes place in the ",(0,l.jsx)(n.a,{href:"https://github.com/drevops/scaffold/blob/develop/phpcs.xml",children:(0,l.jsx)(n.code,{children:"phpcs.xml"})})," file."]}),"\n",(0,l.jsx)(n.p,{children:"By default, PHPCS will check against the following rules:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Drupal"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"DrupalPractice"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Generic.Debug.ESLint"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"PHPCompatibility"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Targets include custom modules and themes, settings and tests."}),"\n",(0,l.jsx)(n.p,{children:"Adding or removing targets:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:"<file>path/to/dir_or_file</file>\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Run checks against platform version specified in ",(0,l.jsx)(n.code,{children:"composer.json"})," key ",(0,l.jsx)(n.code,{children:"config.platform.php"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'<config name="testVersion" value="8.1"/>\n'})}),"\n",(0,l.jsx)(n.h2,{id:"ignoring",children:"Ignoring"}),"\n",(0,l.jsxs)(n.p,{children:["Ignoring rules ",(0,l.jsx)(n.strong,{children:"globally"})," takes place in the ",(0,l.jsx)(n.a,{href:"https://github.com/drevops/scaffold/blob/develop/phpcs.xml",children:(0,l.jsx)(n.code,{children:"phpcs.xml"})})," file:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'\x3c!-- Comment about why this rules is excluded. --\x3e\n<rule ref="DrupalPractice.General.ClassName.ClassPrefix">\n    <exclude-pattern>*\\/dir\\/another\\/*\\.php</exclude-pattern>\n    <exclude-pattern>*\\/dir\\/another\\/*\\.inc</exclude-pattern>\n</rule>\n'})}),"\n",(0,l.jsxs)(n.p,{children:["To ignore ",(0,l.jsx)(n.strong,{children:"all PHPCS rules"})," within a file, place in the file header:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"// phpcs:ignoreFile\n"})}),"\n",(0,l.jsxs)(n.p,{children:["To ignore ",(0,l.jsx)(n.strong,{children:"a specific rule"})," within a file, place in the file header:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"// phpcs:disable <rule_name>\n"})}),"\n",(0,l.jsxs)(n.p,{children:["To ignore rule for the ",(0,l.jsx)(n.strong,{children:"code block"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"// phpcs:disable <rule_name>\n$a = 1;\n// phpcs:enable <rule_name>\n"})}),"\n",(0,l.jsxs)(n.p,{children:["To ignore only the current and the ",(0,l.jsx)(n.strong,{children:"next line"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"// phpcs:ignore\n$a = 1;\n"})}),"\n",(0,l.jsx)(n.h2,{id:"ignoring-fail-in-ci",children:"Ignoring fail in CI"}),"\n",(0,l.jsx)(n.p,{children:"This tool runs in CI by default and fails the build if there are any violations."}),"\n",(0,l.jsxs)(n.p,{children:["Set ",(0,l.jsx)(n.code,{children:"DREVOPS_CI_PHPCS_IGNORE_FAILURE"})," environment variable to ",(0,l.jsx)(n.code,{children:"1"})," to ignore\nfailures. The tool will still run and report violations, if any."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var l=i(6540);const s={},o=l.createContext(s);function r(e){const n=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),l.createElement(o.Provider,{value:n},e.children)}}}]);